@page "/historicos"

@inject IDbReunionService DbReunionService
@inject IAPIReunionService APIReunionService

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
<h3>Históricos</h3>


<BSContainer>

    @if (APIReunionService.centro.Count() == 0)
    {
        <div class="loader"></div>
    }
    else
    {


        <BSRow>
            <BSCol Column="3" ColumnSmall="2">
                <BSLabel>Centro</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="IdCentro">
                    @foreach (var d in APIReunionService.centro)
                    {
                        <option value="@d.IdCentro">@d.Cnom</option>
                    }
                </BSInput>
            </BSCol>


            <BSCol Column="3" ColumnSmall="2">
                <BSLabel>División</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="IdDiv">
                    @foreach (var d in APIReunionService.centro)
                    {
                        @foreach (var e in d.Divisions)
                        {
                            if (IdCentro == d.IdCentro)
                            {
                                <option value="@e.IdDivision">@e.Dnombre</option>
                            }
                        }
                    }
                </BSInput>
            </BSCol>



            <BSCol Column="3" ColumnSmall="2">
                <BSLabel> Desde</BSLabel>
                <BSInput InputType="InputType.Date" @bind-Value="fecha1" />
            </BSCol>

            <BSCol Column="3" ColumnSmall="2">
                <BSLabel>Hasta</BSLabel>
                <BSInput InputType="InputType.Date" @bind-Value="fecha2" />
            </BSCol>

            <BSCol ColumnSmall="1" Column="2">
                <BSLabel>Código</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="Codigo">
                    <option value="Todo">Todo</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </BSInput>
            </BSCol>

            <BSCol ColumnSmall="2" Column="3">
                <BSLabel>Estado</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="Status">
                    <option value="Total Pendiente">Total Pendiente</option>
                    <option value="Todo">Todo</option>
                    <option value="Pendiente">Pendiente</option>
                    <option value="Pendiente/Responsable">Pendiente/Responsable</option>
                    <option value="Listo">Listo</option>
                    <option value="Cerrado">Cerrado</option>
                    <option value="Vencidos">Vencidos</option>
                </BSInput>
            </BSCol>

        </BSRow>
        <p>
        </p>
        <BSRow>

            <BSCol ColumnSmall="2" Column="1">
                <BSRow>
                    <BSLabel> Filtro Fecha de Trabajo</BSLabel>
                </BSRow>
                <BSInputRadio CheckedValue="@("2")" @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall"
                    Color="BSColor.Success" IsOutlined="true">
                    Fecha Trabajo
                    <span class="oi oi-cog"></span>
                </BSInputRadio>
            </BSCol>

            <BSCol ColumnSmall="2" Column="1">
                <BSRow>
                    <BSLabel> Filtro Fecha de Reunión</BSLabel>
                </BSRow>
                <BSInputRadio CheckedValue="@("0")" @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall"
                    Color="BSColor.Success" IsOutlined="true">
                    Fecha Reunión
                    <span class="oi oi-people"></span>
                </BSInputRadio>
            </BSCol>

            <BSCol ColumnSmall="2" Column="2">
                <BSRow>
                    <BSLabel>Buscar</BSLabel>
                </BSRow>
                <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" OnClick="Get"> Consultar <span
                        class="oi oi-check"></span></BSButton>
            </BSCol>

        </BSRow>
    }

</BSContainer>

<p></p>

@if (tabla.Count() > 0 && dataIsLoaded == 2)
{

    <RadzenDataGrid @ref="@ReuTabla" Data="@tabla" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true"
        AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="30" AllowPaging="true"
        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" TItem="ReuDium"
        LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a"
        EditMode="DataGridEditMode.Single" ColumnWidth="200px">
        <Columns>
            @*
        <RadzenDataGridColumn TItem="ReuDium" Title="Centro" Frozen="true" Property="Rdcentro" Width="80px">
        <Template>
        @context.Rdcentro
        </Template>

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ReuDium" Title="División" Frozen="true" Property="Rddiv" Width="80px">
        <Template>
        @context.Rddiv
        </Template>
        </RadzenDataGridColumn>*@

            <RadzenDataGridColumn TItem="ReuDium" Title="#" Frozen="true" Width="35px" Filterable=false>
                <Template>

                    @(tabla.IndexOf(context) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ReuDium" Title="Línea" Frozen="true" Property="Rdarea" Width="80px">
                <Template>
                    @context.Rdarea
                </Template>
            </RadzenDataGridColumn>



            <RadzenDataGridColumn TItem="ReuDium" Title="Equipo" Frozen="true" Property="RdcodEq" Width="80px">
                <Template>
                    @context.RdcodEq
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="KSF" Property="IdksfNavigation.KsfNombre" Width="80px">
                <Template>
                    @context.IdksfNavigation.KsfNombre
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Discrepancia" Property="Rddisc" Width="220px">
                <Template>
                    @context.Rddisc
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Código" Property="RdcodDis" Width="60px">
                <Template>
                    @context.RdcodDis
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Acción" Property="RdplanAcc" Width="200px">
                <Template>
                    @context.RdplanAcc
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Tiempo" Property="Rdtiempo" Width="60px">
                <Template>
                    @context.Rdtiempo
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Responsable" Property="IdResReuNavigation.Rrnombre" Width="100px">
                <Template>
                    @context.IdResReuNavigation.Rrnombre
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="ODT" Property="Rdodt" Width="100px">
                <Template>
                    @context.Rdodt
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="Estado" Property="Rdstatus" Width="90px">
                <Template>
                    @context.Rdstatus
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="F. Reunión" Property="RdfecReu" Width="90px">
                <Template>
                    @context.RdfecReu.ToString("yyyy/MM/dd")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="F. Trabajo" Property="RdfecTra" Width="90px">
                <Template>
                    @context.RdfecTra.ToString("yyyy/MM/dd")
                </Template>
            </RadzenDataGridColumn>



        </Columns>
    </RadzenDataGrid>
}
else if (dataIsLoaded == 1 && tabla.Count() == 0)
{
    <div class="loader"></div>
}
else if (dataIsLoaded == 2 && tabla.Count() == 0)
{
    <p>No hay datos para esta fecha.</p>
}
@code {
    RadzenDataGrid<ReuDium> ReuTabla;
    List<ReuDium> tabla = new List<ReuDium>();

    int dataIsLoaded = 0;
    string ayer = DateTime.Now.AddDays(-1).ToString("yyyyMMdd"), error;
    private bool data { get; set; } = false; //Centro


    [Required(ErrorMessage = "Seleccione el Centro")]
    private int IdCentro { get; set; } //id del Centro
    [Required(ErrorMessage = "Seleccione la división.")]
    private int IdDiv { get; set; } //id de la division

    private int CentroComedor;//Variable para verificar si es el comedor venezuela;

    //private string Div { get; set; } //Centro
    //private string Division { get; set; } //División

    private string Codigo { get; set; } = "Todo"; //Codigo
    private string Status { get; set; } = "Total Pendiente"; //Status
    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar
    private bool cargandocambio { get; set; } = false; //para cargar los datos del trazabilidad
    private string tipoconsulta { get; set; } = "0"; //1-fecha de reuinion 0 fecha trabajo
    private List<Claim> claims { get; set; }
    public DateTime fecha1;
    public DateTime fecha2;


    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        fecha1 = DateTime.Now;
        fecha2 = DateTime.Now;
        await CreateData();

        var rol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;

        // if (rol == "Admin" || rol== "SuperAdmin")
        // {
        // UsrAdmin = rol;
        // await APIReunionService.GetCentrosxEmpresa("All" + claims[10].Value);

        // }
        // else if (rol== "SupIntendenteGeneral")
        // {
        // UsrAdmin = rol;
        // await APIReunionService.GetCentrosxEmpresa(claims[11].Value);
        // }
        // else if ( rol == "SupIntendente" || rol== "Planificador")
        // {
        // await APIReunionService.GetCentrosxEmpresa(claims[11].Value);
        // }
        // else if (rol == "MttoAdmin")
        // {
        // UsrRol = "Mtto";
        // await APIReunionService.GetCentrosxEmpresa("All" + claims[10].Value);
        // }
        // else if (rol == "SeguridadAdmin")
        // {
        // UsrRol = "SeguridadAdmin";
        // await APIReunionService.GetCentrosxEmpresa("All" + claims[10].Value);
        // }
        // else
        // {
        // if (rol == "Mantenimiento")
        // {
        // UsrRol = "Mtto";
        // }
        // else
        // {
        // UsrRol = rol;
        // }

        // await APIReunionService.GetCentrosxEmpresa(claims[11].Value);

        // }

        //TODO: Crear logica con funcion qur retorne esto.se usa en hoistoricos tambien
        switch (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value)
        {
            case "Admin":
            case "SuperAdmin":
                UsrAdmin = "SuperAdmin";
                await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;

            case "SupIntendenteGeneral":
                UsrAdmin = "SupIntendenteGeneral";
                await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;

            case "Planificador":
            case "SupIntendente":
                await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;

            case "Auditores":
                await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;

            case "MttoAdmin":
                UsrRol = "Mtto";
                await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;
            case "SeguridadAdmin":
                UsrRol = "Seguridad";//Seguridad para filtar por seguridad
                await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;
            case "CalidadAdmin":
                UsrRol = "Calidad";//Seguridad para filtar por calidad
                await APIReunionService.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;
            case "Mantenimiento":
                UsrRol = "Mtto";
                await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;

            default:
                UsrRol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
                await APIReunionService.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;
        }

        IdCentro = int.Parse(claims[11].Value);
        IdDiv = int.Parse(claims[12].Value);

        await APIReunionService.Getksf();
        await APIReunionService.GetResReu();
        DbReunionService.reudiatablas = new List<ReuDium>();


    }

    protected async Task Get()
    {
        if (dataIsLoaded != 1)
        {
            dataIsLoaded = 1;
            tabla = await DbReunionService.GetHistoricos(IdCentro.ToString(), IdDiv.ToString(), fecha1, fecha2, tipoconsulta,
            Status);
            dataIsLoaded = 2;
        }
    }
}
